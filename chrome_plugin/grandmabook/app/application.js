// Generated by CoffeeScript 1.6.3
(function() {
  var $, GmailNewComposeEmailTracker, MainWatcher, annotateCompose, script;

  console.verbose = console.log;

  $ = jQuery;

  if (!window.io) {
    script = document.createElement('script');
    script.setAttribute('src', "//ws.familicircle.com/socket.io/socket.io.js");
    document.head.appendChild(script);
  }

  MainWatcher = (function() {
    function MainWatcher(emailId) {
      this.emailId = emailId;
      this.emailId = 0;
      this.views = [];
    }

    MainWatcher.prototype.attachGrandmabook = function(el, text) {
      var $el, binded_callback, callback, emailId, view, _enabled, _enabled_url, _tooltip,
        _this = this;
      $el = $(el);
      if (!$el.hasClass("grandmabook-nc-email")) {
        emailId = this.emailId;
        this.emailId += 1;
        $el.addClass("grandmabook grandmabook-nc-email grandmabook-nc-email-" + emailId);
        _enabled = true;
        _enabled_url = "";
        _tooltip = "Track Email with Grandmabook";
        callback = function(success) {
          _this.views.push(view);
          return console.log("GRANDMABOOK: Created View");
        };
        binded_callback = _.bind(callback, this);
        return view = new GmailNewComposeEmailTracker({
          emailId: emailId,
          dialogEl: $el,
          enabled: _enabled,
          enabled_url: _enabled_url,
          tooltip: _tooltip,
          callback: binded_callback
        });
      }
    };

    MainWatcher.prototype.parseDOM = function() {
      var dialog, dialogs, email, email_elem, email_pattern, err, popout, popouts, replies, reply, _error, _i, _j, _k, _len, _len1, _len2, _results;
      try {
        if (window.detected_email == null) {
          email_elem = $("span[class='gbps2']:first");
          if (email_elem[0] != null) {
            email = email_elem.first().text();
            console.verbose("GRANDMABOOK: Found email " + email);
            email_pattern = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
            if (email_pattern.test(email)) {
              window.detected_email = email;
            } else {
              window.detected_email = null;
            }
          }
        }
        popouts = $("body.xE.xp");
        dialogs = $(".nH.Hd[role='dialog']");
        replies = $("table .M9");
        for (_i = 0, _len = dialogs.length; _i < _len; _i++) {
          dialog = dialogs[_i];
          this.attachGrandmabook(dialog, "dialog");
        }
        for (_j = 0, _len1 = replies.length; _j < _len1; _j++) {
          reply = replies[_j];
          this.attachGrandmabook(reply, "reply");
        }
        _results = [];
        for (_k = 0, _len2 = popouts.length; _k < _len2; _k++) {
          popout = popouts[_k];
          _results.push(this.attachGrandmabook(popout, "popout"));
        }
        return _results;
      } catch (_error) {
        _error = _error;
        err = _error;
        return console.verbose("Mutation Error - " + err.message);
      }
    };

    MainWatcher.prototype.watchForChanges = function() {
      var config, observer, parseFunc;
      config = {
        childList: true,
        subtree: true
      };
      console.verbose("GRANDMABOOK: Starting Compose Mutation Observer");
      parseFunc = this.parseDOM;
      this.parseDOM();
      observer = new MutationObserver(_.bind(parseFunc, this));
      return observer.observe(document, config);
    };

    return MainWatcher;

  })();

  GmailNewComposeEmailTracker = (function() {
    GmailNewComposeEmailTracker.prototype.LOGO = 'http://www.familicircle.com/images/logo_40_trans.png';

    function GmailNewComposeEmailTracker(params) {
      this.emailId = params.emailId, this.dialogEl = params.dialogEl, this.enabled = params.enabled, this.enabled_url = params.enabled_url, this.tooltip = params.tooltip, this.callback = params.callback;
      this.dialogCls = ".grandmabook-nc-email-" + this.emailId;
      this.ui = {
        dialog: this.dialogEl
      };
      this.$el = $("<p class='grandmabook-container'/>");
      this.el = this.$el[0];
      this.watchEmailDialog();
    }

    GmailNewComposeEmailTracker.prototype.template = function(params) {
      return "<div class='" + params.dialogCls + "'>\n<img src='" + this.LOGO + "' alt='FamiliCircle'>\nYo, what up\n</div>";
    };

    GmailNewComposeEmailTracker.prototype.clickedDisable = function() {
      var url;
      url = void 0;
      url = this.enabled_url;
      return window.open(url, "_blank");
    };

    GmailNewComposeEmailTracker.prototype.beforeRemove = function() {
      if (this.observer) {
        this.observer.disconnect();
      }
      $(this.ui.messageBody).off("DOMSubtreeModified", this.doBodyCheck);
      if (this.ui.sendButton) {
        return this.ui.sendButton.off();
      }
    };

    GmailNewComposeEmailTracker.prototype.render = function() {
      var tooltip;
      tooltip = void 0;
      tooltip = this.tooltip;
      this.$el.html(this.template({
        tooltip: tooltip
      }));
      this.ui.checkbox = this.$el.find(".grandmabook-js-checkbox");
      this.ui.label = this.$el.find(".grandmabook-css-newcompose");
      return this;
    };

    GmailNewComposeEmailTracker.prototype.watchEmailDialog = function() {
      var config, err, target, _error,
        _this = this;
      config = {
        childList: true,
        subtree: true
      };
      console.verbose("GRANDMABOOK: Initializing Compose Mutation Observer for " + this.dialogCls);
      this.observer = new MutationObserver(function(mutations) {
        var err, send, text_box, trash, trashCls, wisestamp, _error;
        try {
          text_box = $("" + _this.dialogCls + " .MqbIU");
          if (text_box.length && !_this.ui.textBox) {
            _this.ui.textBox = text_box;
            _this.initializeTextBox();
          } else {
            text_box = $("" + _this.dialogCls + " .aWQ");
            if (text_box.length && !_this.ui.textBox) {
              _this.ui.textBox = text_box;
              _this.initializeTextBox();
            }
          }
          send = $("" + _this.dialogCls + " .T-I.J-J5-Ji.aoO.T-I-atl.L3");
          if (send.length && !_this.ui.sendButton) {
            _this.ui.sendButton = send;
            _this.initializeSendButton();
          }
          trashCls = ".og.T-I-J3";
          trash = $("" + _this.dialogCls + " " + trashCls);
          if (trash.length && !_this.ui.trashcan) {
            console.verbose("GRANDMABOOK: Found Trashcan");
            _this.ui.trashcan = _this.ui.dialog.find(trashCls).parents(".J-J5-Ji[id]").last();
            if (!_this.wisestamp) {
              _this.attachBar();
            }
          }
          wisestamp = $("#WiseStamp_icon");
          if (_this.wisestamp && _this.ui.trashcan && wisestamp.length && !_this.ui.wisestamp) {
            _this.ui.wisestamp = wisestamp;
            return setTimeout((function() {
              this.attachBar();
              return this.initialTrackerCheck();
            }), 500);
          }
        } catch (_error) {
          _error = _error;
          err = _error;
          return console.verbose("GRANDMABOOK: " + err.message);
        }
      });
      try {
        target = $("" + this.dialogCls).get(0);
        return this.observer.observe(target, config);
      } catch (_error) {
        _error = _error;
        err = _error;
        return console.verbose("GRANDMABOOK: " + err.messgae);
      }
    };

    GmailNewComposeEmailTracker.prototype.initializeTextBox = function() {
      if (this.enabled) {
        this.ui.textBox.prepend("<span class='oG grandmabook-note grandmabook-tracked'>Tracked Email</span>");
        return this.ui.textBox.prepend("<span class='oG grandmabook-note grandmabook-untracked'>Untracked Email</span>");
      }
    };

    GmailNewComposeEmailTracker.prototype.initializeSendButton = function() {
      return this.ui.sendButton.html("<i class='grandmabook-send-button-icon icon-grandmabook'></i>Send");
    };

    GmailNewComposeEmailTracker.prototype.attachBar = function() {
      var form_elem;
      form_elem = void 0;
      console.verbose("GRANDMABOOK: Attaching Grandmabook Bar");
      this.dialogEl.find(".aDh").before(this.render().el);
      return;
      form_elem = this.ui.dialog.find("form");
      this.ui.hidden_elem = $("<input>").attr({
        type: "hidden",
        name: "grandmabook_tracked",
        value: true
      });
      this.ui.hidden_elem.appendTo(form_elem);
      this.trackerBoxChecked = true;
      return this.attached_callback(true);
    };

    return GmailNewComposeEmailTracker;

  })();

  annotateCompose = function() {
    var mw;
    mw = new MainWatcher();
    return mw.watchForChanges();
  };

  annotateCompose();

}).call(this);
